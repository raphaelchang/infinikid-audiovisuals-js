import * as THREE from 'three';

const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );

const renderer = new THREE.WebGLRenderer({antialias: true});
renderer.setSize( window.innerWidth, window.innerHeight );
renderer.physicallyCorrectLights = true;
document.body.appendChild( renderer.domElement );

const geometry = new THREE.BoxGeometry( 2, 2, 2 );
const material = new THREE.MeshStandardMaterial( { color: 0x00ff00 } );


const vertexShader = document.getElementById( 'vertexShader' ).textContent;
const fragmentShader = document.getElementById( 'fragmentShader' ).textContent;
const cubeShader = new THREE.ShaderMaterial({
    uniforms: {
        time: { value: 1.0 },
        resolution: { value: new THREE.Vector2() },
        cameraPosView: { value: new THREE.Vector3() }
    },
    vertexShader: vertexShader,
    fragmentShader: fragmentShader,
    lights:true
})

const cube = new THREE.Mesh( geometry, cubeShader );
cube.position.set(1, 1, 1);

const light = new THREE.PointLight('white', 100);
light.position.set(0, 0, 10);

scene.add(cube, light);

camera.position.z = 5;

renderer.setAnimationLoop(() => {
    cube.rotation.x += 0.01;
    cube.rotation.y += 0.01;
    cubeShader.uniforms.time.value += 0.1;
    cubeShader.uniforms.resolution.value.x = window.innerWidth;
    cubeShader.uniforms.resolution.value.y = window.innerHeight;
    cubeShader.uniforms.cameraPosView.value = camera.position;
    renderer.render( scene, camera );
});

setupOsc();

function setupOsc() {
    oscHandler = new OSCHandler();
    registerOscCallbacks();
    oscHandler.setPlaybackFrameRate(fr);
    capturer = new CCapture({format: 'png', framerate: fr});
    socket = new osc.WebSocketPort({
        url: 'ws://localhost:' + port
    });
    socket.on('message', oscHandler.handleOsc.bind(oscHandler));
    socket.open();
}


function registerOscCallbacks() {
}

class OSCHandler {
    constructor() {
        this.onCallbacks = {};
        this.offCallbacks = {};
        this.changeCallbacks = {};
        this.recording = false;
        this.messages = [];
        this.startTimestamp = 0;
        this.currentPlaybackFrameNumber = 0;
        this.frameRate = 30;
    }

    handleOsc(msg) {
        if (this.recording) {
            this.messages.push([msg, Date.now() - this.startTimestamp]);
        }
        let match = msg.address.match(/[a-zA-Z]+\/note_([0-9]+)/);
        if (match !== null) {
            if (msg.args[0] > 0) {
                if (match[1] in this.onCallbacks) {
                    this.onCallbacks[match[1]]();
                }
            } else if (msg.args[0] == 0) {
                if (match[1] in this.offCallbacks) {
                    this.offCallbacks[match[1]]();
                }
            }
        }
        match = msg.address.match(/[a-zA-Z]+\/([a-zA-Z]+)$/);
        if (match !== null) {
            if (match[1] in this.changeCallbacks) {
                this.changeCallbacks[match[1]](msg.args[0]);
            }
        }
    }

    onNoteOn(note, callback) {
        this.onCallbacks[note] = callback;
    }

    onNoteOff(note, callback) {
        this.offCallbacks[note] = callback;
    }

    onChange(address, callback) {
        this.changeCallbacks[address] = callback;
    }

    startRecording() {
        this.startTimestamp = Date.now();
        this.messages = [];
        this.recording = true;
    }

    stopRecording() {
        this.recording = false;
    }

    setPlaybackFrameRate(framerate) {
        this.frameRate = framerate;
    }

    playbackReset() {
        this.currentPlaybackFrameNumber = 0;
    }

    playbackIncrement() {
        if (this.recording) return;
        let currentTimeMillis = this.currentPlaybackFrameNumber * 1000.0 / this.frameRate;
        let lastTimeMillis = (this.currentPlaybackFrameNumber - 1) * 1000.0 / this.frameRate;
        for (const msg of this.messages) {
            if (msg[1] > lastTimeMillis && msg[1] <= currentTimeMillis) {
                this.handleOsc(msg[0]);
            }
        }
        this.currentPlaybackFrameNumber++;
    }
}
